[["01-Python.html", "Python for Bioinformatics 1 Introduction", " Python for Bioinformatics June, 2023 1 Introduction In this practical session we are going to learn Python programming skills. We will be learning the fundamentals of Python scripting and several Python tools focused on data manipulation. Whilst we will be working mostly with DNA sequence data, the methods and approaches can be modified to work with most types of data. During this session we will work through the following sections: Course Introduction Working in the VNC Scripting in Python Python Fundamentals Data Structures [Conditions (if and else statements)][Python Conditions: 'if' and 'else' statements] [Loops][Loops] [Working with DNA Sequence Data][Reading sequence data] [Manipulating Sequence Data][Using Conditions to Modify DNA Data] [Reading and Writing Files][Reading and writing files] This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],["02-intro.html", "2 Python for bioinformatics 2.1 Materials Covered in the Course 2.2 Inputting Commands 2.3 Pseudocode", " 2 Python for bioinformatics This is a course to explore and learn the fundamentals of programming in the Python language with a specific focus on how this tool can be used in bioinformatics. Python is a high level programming language enabling very rapid development of applications or scripts. It has a simple, easy-to-read syntax and is very accessible as a first or second programming language. Python has many pre-built modules and packages, allowing you to import lots of functionality, and avoid the need to \"re-invent the wheel\". Python is favoured by many programmers for the flexibility it affords and the speed at which it can be written. This course assumes absolutely no Python experience or prior programming experience in any other language. Over the next two days you will: Learn the fundamental components of a Python script Discover how to write, edit and run a Python script Understand and use variables Understand and choose data structures Use control structure (conditions and loops) Learn string manipulation Read and manipulate DNA sequence data Be able to read input files and write output files Have a plan on what to do next to further your knowledge. We will cover the theory behind Python concepts and terminology. Python is designed to be human-readable code and understanding the underlying processes is important. There will be lots of opportunity to practice writing Python. Practice will involve typing and running Python code whilst working through the workshop materials. This will allow you to see the output of Python commands and help you to understand how Python works. 2.1 Materials Covered in the Course After learning some of the basics of Python we will import some DNA sequence data and perform some common types of analyses. The focus is on learning the theory and the ways in which Python can be used, rather than the specifics of the analysis. Hopefully you will take away new skills that can be applied to your own data. In the supplementary material, we import and work with a different form of data often encountered by biologists; the comma delimited file. 2.2 Inputting Commands Commands are in the following font and colour and should be run in the VNC window following the link provided to you by the course coordinators. (Do not try to run the following, however.) This is an example of a command. 2.3 Pseudocode Sometimes to illustrate how a concept works, we will illustrate it with some pseudocode. This is a way of representing a concept in simple terms that can be understood without knowing the correct programming terminology or syntax. Do not try to run the pseudocode as Python will not understand it. "],["03_cluster_introduction.html", "3 Cluster Introduction 3.1 Logon Instructions 3.2 The Terminal Window 3.3 Load workshop data 3.4 Mamba", " 3 Cluster Introduction 3.1 Logon Instructions For this workshop we will be using Virtual Network Computing (VNC). Connect to the VNC with a browser by using the webVNC link you were sent. You will now be in a logged-in Linux VNC desktop with a terminal window visible. You will see something as below. If you do not see something similar please ask for assistance. If the VNC is taking up too much/little space of your browser you can use the zoom of your browser to adjust the size. Ensure you can see one whole terminal. During the first chapters of this session you will be working directly in the terminal window in the VNC. During the latter chapters we will open a plain text editor called Gedit. 3.2 The Terminal Window In our case the terminal window looks like the picture below. We are using the terminal window as our shell to interpret our commands to the kernel. Depending on your system and preferences it may look different. You're now ready to start the workshop! 3.3 Load workshop data Before we get started, we need to copy across some data files to analyse later in the workshop. In the terminal window, issue the following commands to copy the data into your account: cd ~ cp -r /pub14/tea/nsc206/NEOF/Python_course_data . 3.4 Mamba This workshop requires some programs. These can be difficult to install. Instead we have used Mamba forge to install the programs including Jupyter-notebook. To learn more about Mamba-forge and how to create your own environment please see the appendix. To set-up your environment for this workshop please run the following code (you must include the full stop and space at the front of the command). . usepython You will have successfully activated the environment if you now see (python) at the start of your command prompt. This indicates you are now in the mamba environment called python created by the instructor. If you are interested in the use script you can look at its contents. less /usr/local/bin/usepython Tip: press q to quit less. For more about mamba and how to create your own python environment please see the appendix "],["04-Jupyter.html", "4 Jupyter 4.1 Open Jupyter-notebook 4.2 Changing directories 4.3 Create notebook 4.4 Cells and code 4.5 Create new cells 4.6 Running code 4.7 Saving the file 4.8 Title cells with markdown 4.9 Close the notebook 4.10 Video tutorial", " 4 Jupyter Jupyter-notebook is a nice browser based method to write, edit, and run code. It was initially created for Python coding, but has since branched out to many other languages, such as R. We are using it in this workshop for a variety of its properties: It is popular and well maintained. It is lightweight. Other heavier weight programs would struggle in our HPC due to the graphical and CPU load. It is interactive and displays code output. It allows for easier annotation, editing, and debugging than the command line. It provides a graphical interface for changing directories and choosing files. Before carrying out any analysis we will go through a quick tutorial of jupyter-notebook. 4.1 Open Jupyter-notebook The first step is to open jupyter-notebook. Run the below command in your (python) environment. jupyter-notebook This will open jupyter-notebook in firefox. We won't need to access the linux terminal in this book anymore. Leave the terminal running jupyter-notebook and full screen your firefox so you should see something like below. Can't see the whole webVNC window? You may need to zoom out with your browser so you can see the full webVNC window. Chrome: Click on the three dots in vertical line ( ) on the top left for a dropdown menu which includes zoom options. Edge: Click on the three horizontal lines ( ) on the top left for a dropdown menu which includes zoom options. Firefox: Click on the three dots in horizontal line ( ) on the top left for a dropdown menu which includes zoom options. 4.2 Changing directories To move around the directories you can click on directory names. Click on \"Python_course_data\" to move into that directory. You will then see the below showing the files in the directory. 4.3 Create notebook The next step is to create a python notebook. Click on the \"New\" button towards the top right, right of the \"Upload\" button. From the dropdown click Python 3 (ipykernel). This will open up a new R notebook like below. 4.4 Cells and code Jupyter-notebook uses cells (the gray boxes) to separate code. This is very useful to compartmentalise our code. There will already be one cell. Within the cell, type in the below commands. 1+1 When pressing enter in cells it will create a new line. To run all commands in a cell press CTRL + enter. Run your current cell and you should see something like below. 4.5 Create new cells You can create new cells by 2 different means. Press the + button on the tool bar (between the floppy disk and scissors ). This will add a cell below your currently selected cell. Click on the Insert button and use the dropdown to add a cell above or below your currently selected cell. Tip: Hover over the toolbar icons to display a text based description of its function. With that knowledge add a second cell below the first cell. Add the following code to your second cell but do not run it. num_1 = 3 num_2 = 10 Tip: Notice there are green lines around your selected cell. Insert a third cell and add the following code to it. Do not run the code. num_1 * num_2 4.6 Running code Try to run the code in the third cell. There should be an error as we have not created the objects num_1 &amp; num_2. We have only written the code for these objects but not run them. We can run all the code in a notebook starting from the first cell to the last cell. To run all cells from the start: Click on the \"Cell\" button. Click \"Run All\" from the drop-down options. You should then see something like the below in your notebook. There is no output printed for cell 2 because we are assigning variables. However, the correct output for Cell 3 is below it. This is because the variables were assigned in cell 2 before cell 3 was run. 4.7 Saving the file As with many good coding interfaces we can save our notebook. First we should rename the file. Rename the notebook to \"jupyter_tut\": Click on the name of the notebook, currently called \"Untitled\". This is at the very top of the notebook, right of the Jupyter logo. A pop-up called \"Rename Notebook\" will appear. Change the Name to \"jupyter_tut\". Click \"Rename\". Now we can save the file. Two methods to save are: Click the floppy disk on the toolbar. Click on the \"File\" button. Click \"Save and Checkpoint\" from the dropdown options. 4.8 Title cells with markdown We will be using multiple notebooks in this workshop. We will also have multiple sections per notebook. It will be useful to create header cells with markdown to create visual separation of the different sections. To add a header cell to the top of our notebook: Create a new cell at the top of the notebook. Click on the \"Code\" drop down and select \"Markdown\". The \"Heading\" option no longer works. Add the following to the \"Markdown\" cell to create a first level header. Ensure you have a space between the # and header text (\"Tutorial\"). # Tutorial Great, we can now add nice headers in our notebooks. Save the notebook once more before carrying on to the next section. Markdown You won't need to know more about Markdown but if you are interested please see the Markdown guide. 4.9 Close the notebook To close the notebook: Click on \"File\". From the dropdown options click \"Close and Halt\". When you are back in the file explorer page you may not yet set the new file you saved. If so, you will need to refresh the page with the Refresh button towards the top right. With that quick tutorial of jupyter-notebook we can start our community analysis in the next chapter. For more info on jupter-notebook please see the appendix. 4.10 Video tutorial "],["05-basic_coding.html", "5 Scripting in Python 5.1 Introduction to commands and scripts 5.2 Issuing commands 5.3 A note on indentation 5.4 Scripting recap MCQs", " 5 Scripting in Python 5.1 Introduction to commands and scripts There are two important components to programming in Python; the commands that are committed by the user, and the interpreter which receives and implements the commands. Each command can be thought of as a single instruction and these can be added together into a series of steps, called a script. Think about how a cooking recipe is often presented: Break a few eggs Make an omelette These are two distinct commands, but together they form a script for how to transform raw eggs into an omelette. 5.2 Issuing commands In this section we will learn and use some Python commands. Create a new notebook in your \"Python_course_data\" directory. Rename it to \"01-Fundamentals\" and save it. Convert the first cell to a Markdown cell. Add the following to the cell to create a 1st and 2nd level header. # 1-Fundamentals ## Scripting 5.2.1 Print The first command we will use is print(). This will print the desired text. Type and run the below commands in 2 new Code cells. Note: Python is very particular about braces/brackets and quote marks. print(&quot;Hello, world!&quot;) print(&quot;I&#39;m excited to be learning some Python!&quot;) Below each cell you will see the specified text. 5.2.2 Working directory The command getcwd() stands for \"get the current working directory\". This command comes from the Python module os. We therefore need to import the module and specify it when running the command (os.getcwd()). Run the below in a new cell. import os os.getcwd() This will return something like: '/pub39/tea/nsc206/Python_course_data' (your nsc number will be different though). print() and os.getcwd() are nice commands to start with but don't appear very useful, yet. We will see later how they can be used effectively. 5.3 A note on indentation Indentation refers to any spaces or tab characters at the beginning of a line of code. Indentation helps readability of code. It defines code blocks dedicated to a single purpose. However, indentation in Python is mandatory and the interpreter will give an error if the indentation is wrong. MATTHEW CHEK THIS LATTER The code editor we are going to be using today attempts to auto indent code but we still need to take care that the level of indentation in the script matches that in the workbook exactly. 5.3.1 Tabs vs spaces There is an active debate about whether tabs or spaces are more appropriate for indentation. For reference, one tab = 4 spaces. You can use either tabs or spaces, but you cannot use them interchangeably! Use one and keep consistent with your use. Do not enter the below, this is just an illustration of how three levels of tab indentation looks in a script. # Zero level of indentation # One level of indentation # Two levels of identation # Zero level of indentation 5.4 Scripting recap MCQs Choose the correct option to complete the below sentences: The command ________ gets your current working directory. getcwd() os print() The command ________ prints text. getcwd() os print() The module ________ is needed for the getcwd() command. getcwd() os print() ________ can be used for indentation in Python. Tabs Spaces Tabs or Spaces "],["06-python_fundamentals.html", "6 Python Fundamentals 6.1 Operators 6.2 Comments/Annotations 6.3 Variables 6.4 Classes of variable 6.5 Transforming variables 6.6 Fundamentals MCQ recap", " 6 Python Fundamentals This chapter covers some of the fundamental concepts of scripting in Python. An understanding of how to use operators, variables, and functions will give a good grounding in how the language works and allow you to develop your own methods and code. You definitely do not need to memorise all the information here as all of these concepts will be explored more in the rest of the tutorial. The best way to learn how various aspects of the Python language work is by doing rather than by reading. Consider coming back to this page later if you want to remind yourself of how a particular operator works or how to define a function. We'll continue to use our \"01-Fundamentals\" notebook. Within it create a new Markdown cell with the following headers: ## Fundamentals ### Operators 6.1 Operators Python allows the use of the usual arithmetic operators and follows the traditional rules of mathematical precedence (BODMAS). The main mathematical operators are: + (addition) - (subtraction) * (multiplication) / (division) ** (power/exponent) // (Floor division) % (modulo operator. Find the remainder after dividing 2 numbers) For each code block below create a code cell, enter the code, and run it. This will demonstrate the code output and give you some practice. Tip: You can can create a bunch of empty cells and then use the up and down arrow keys to move your cell selection up and down. You can then start typing in your selected cell so you don't need to constantly switch between mouse and keyboard, , you may need to press enter to start typing in the cell. 1+1 9-6 3*4 42/7 45/7 3**3 42//7 45//7 45%7 6.2 Comments/Annotations It is often useful to include human-readable comments in your scripts and code. Comments/Annotations in Python are indicated by the hash symbol (#). Anything to the right of the hash is considered a comment and is ignored by the interpreter. Create a new Markdown cell with the following. ### Annotation In a new cell, enter and run the below. # This line is a comment print(&quot;This section will print&quot;) # This section is ignored Only the print() command is used by the python interpreter. The other text is ignored due to the hashtags. You will also notice that the text of comments/annotations are uniquely coloured in jupyter-notebook. This is useful to quickly see what are parts of comments and not. 6.3 Variables Variables are used to store information which can then be referenced or manipulated later. It is useful to label data with descriptive names which are easily read by humans. You can think of a variable as a 'container' to hold a piece of information. Variables are assigned a value using the equals (=) character. Variable name rules: Must start with either a letter or an underscore Must only contain alphanumeric characters (and underscores) They are case sensitive. Python supports several classes (or types) of variables including strings, integers, floats, and booleans. In a new Markdown cell add the following: ## Variables ### Strings 6.3.1 Strings Strings are used to store alphanumeric text. A string is defined by enclosing the text with either single or double quotes. Enter the following into the Python terminal, pressing enter after each line. Here we define two string variables, and then retrieve them again by using their name, or identifier. As before, for each code block below create a code cell, enter the code, and run it. Do this for all future code examples. #Assign string variables DNA_string = &quot;GCACAAACC&quot; amino_acids = &quot;ARG VAL TRP&quot; #Call the DNA_string variable DNA_string #Call the amino_acid string variable amino_acids You will notice that you can use your variables in the same cell you created it in, or in a different cell. As long as you have run the code that creates/assigns the variable you can use it elsewhere in the same notebook. 6.3.2 Integers Integers are used to store whole numbers. These should not be declared with quote marks otherwise they will be stored as a string. Create the following markdown cell: ### Integers Create and run the following code cells: #Roman numeral letters I = 1 V = 5 X = 10 L = 50 C = 100 D = 500 M = 1000 I X #7 VII = V + (I * 2) VII #67 LXVII = L + X + VII LXVII #44 XLIV = (L - X) + (V - I) XLIV #2023 MMXXIII = (M * 2) + (X * 2) + (I * 3) MMXXIII 6.3.3 Floats (floating point numbers) Floating point numbers are used to store real numbers (I.e. a number written with a decimal point dividing the integer and the fractional parts). Create a new markdown cell with the following: ### Floats Run the following code: my_float = 7.0001 another_float = 345.765 yet_another_float = -5.423e+19 my_float another_float yet_another_float 6.3.4 Booleans Booleans are a special type of variable than can represent one of two values: True or False. You can compare any two values in Python and get a result of either True or False. To check if two values are equal we use double equals: == To check if two values are not equal we use: != Greater than (&gt;) or less than (&lt;) also work. Create a new markdown cell with the following: ### Booleans Run the following code: 1 == 1 1 == 2 2 == 17 2 != 17 (10 * 2) &lt; 30 (10 * 30) &gt; 20 #Use one of our previously created integer variables a_bool = X &gt; 4 a_bool #Check if 2 string variables are identical #Cannot use &gt; or &lt; with strings another_bool = DNA_string == amino_acid another_bool yet_another_bool = a_bool == another_bool yet_another_bool 6.4 Classes of variable Every variable in Python has a class. These are the characteristics we described above: String (&lt;class 'str'&gt;) Integer (&lt;class 'int'&gt;) Float (&lt;class 'float'&gt;) Boolean (&lt;class 'bool'&gt;) Unlike some other languages, you do not need to tell Python which class a variable should have. Python will try to figure it out based on the value assigned. Create a new markdown cell with the following: ## Classes You can check the class of a variable by passing it to the type() function: variable1 = &quot;a piece of text&quot; type(variable1) variable2 = 5 type(variable2) variable3 = 7.0001 type(variable3) variable4 = True type(variable4) 6.5 Transforming variables Variables can be transformed from one class/type to another provided the value can be coerced into the new data type (I.e. you could not transform a string of text to a floating point number). Create a new markdown cell with the following: ## Transforming variables To transform a float to an integer use the int() function (note the loss of precision): a_float = 17.45 int(a_float) To transform an integer to a string use the str() function: an_integer = 783473 str(an_integer) You can transform a numeric string to an integer: a_numeric_string = &quot;256&quot; int(a_numeric_string) You can also transform to a floating point using float(): a_float_string = &quot;3.14&quot; float(a_float_string) 6.6 Fundamentals MCQ recap Brilliant, that is the end of this chapter. Have you saved your notebook? It is good practice to save it regularly. Choose the correct option to complete the below sentences: All variables have a ________. Class Comments String The hashtag (#) can be used to add ________ to code. Class Comments String Quotes ('single' or \"double\") are used to create ________ variables. Class Comments String ________ is a numeric class which does not contain decimal points (whole numbers). Boolean Float Integer ________ is a numeric class which does contain decimal points (real numbers). Boolean Float Integer ________ is a class that stores True or False. Boolean Float Integer "],["07-functions_and_methods.html", "7 Functions and methods 7.1 Functions 7.2 Methods 7.3 Functions and methods MCQ recap", " 7 Functions and methods Functions and methods are groups of instructions that together perform a specific task. This may be a task that you need to run repeatedly on your data. By storing these instructions in a single function/method, you only need to enter the code once and simply re-use it each time. A function/method returns a value after it has performed the specific task. Use the same notebook (\"01-Fundamentals\") and add the following markdown cell: ## Functions &amp; methods ### Functions 7.1 Functions A function is a distinct piece of code which requires data for it to run. To run a function you need the name of the function followed by a pair of braces (()) with the desired input within the braces. We have already used some functions: int() str() float() type() Imagine that we need to find the length of a string of nucleotides (i.e. how many bases are in a piece of DNA). In this instance, we can use the built-in len() function on the string: (use any string of 'ACGT' you like, no need to copy this one exactly!) #Random DNA sequence DNA1 = &quot;ACGTGTTATATGCGCGTTAGTGTAGTCGATC&quot; #print the length of the DNA len(DNA1) Make another random length of DNA and check its length: #Random DNA sequence DNA2 = &quot;AGCTGACTGCATGATTGCTGATCAACAGT&quot; #print the length of the DNA len(DNA2) You can use the + operator to paste 2 or more strings together which is useful. DNA3 = DNA1 + DNA2 DNA3 len(DNA3) The below code incorporates previously made variables and used functions. Make a good attempt to understand it. You can try running smaller parts of the code to more easily see what each part is doing (e.g. only run str(X)). If you are unsure please ask a demonstrator, they are more than happy to help. maths_sentence = str(X) + &quot; + &quot; + str(V) + &quot; = &quot; + str(X + V) maths_sentence len(maths_sentence) You'll notice that each character (including spaces ) adds to the length. 7.2 Methods Methods are very similar to functions in that they process an input in some manner. They differ in that methods are associated with a particular data class (string, for example) and are called via the data itself. Methods are called using a different syntax; the variable is followed by . and the name of the method with a pair of braces. Create a new markdown cell with the following: ### Methods Let's try a couple of methods associated with manipulation of string data: #Define a string called sequencers sequencers = &quot;illumina,oxford_nanopore,pac-bio&quot; The upper() method converts string variables to upper-case. sequencers.upper() The split() method chops a string up wherever the specified sub-string occurs (comma in this case). sequencers.split(&quot;,&quot;) Multiple methods can be used in one line. This is the main advantage of the method syntax. sequencers.upper().split(&quot;,&quot;) We can also use built-in methods for some simple analysis using the \"DNA1\" string generated earlier. Use the count() method to count the number of each nucleotide in the string. DNA1.count(&quot;A&quot;) DNA1.count(&quot;C&quot;) DNA1.count(&quot;G&quot;) DNA1.count(&quot;T&quot;) By using the len() function and the count() method, we can calculate the GC content of the DNA1 sequence: #Count the number of G and C in the sequence G_total = DNA1.count(&quot;G&quot;) C_total = DNA1.count(&quot;C&quot;) #Calculate the GC% (G_total + C_total) / len(DNA1) * 100 7.3 Functions and methods MCQ recap We have explored functions (function_name(variable)) and methods (variable_name.function_name()), and can now apply them to variables. You'll learn more functions and methods throughout this course. It is nigh impossible to learn all the function and __methods. During this course and afterwards you can refer to the cheatsheet in the appendix to get a quick summary of all the functions and methods used in this book. Choose the correct option to complete the below sentences: ________ are associated a specific class. Functions Methods Operators The syntax of ________ are command_name(data). Functions Methods Operators The syntax of ________ are data.command_name(). Functions Methods Operators The function ________ can count the number of characters in a string. .count() len() .upper() The method ________ can count the number of instances of a pattern in a string variable. .count() len() .upper() The method ________ can convert a string variable to lower-case. .count() len() .upper() "],["08-data_structures.html", "8 Data Structures 8.1 Lists 8.2 Subsetting data 8.3 Set 8.4 Convert a list to a set 8.5 Dictionary 8.6 Data structures MCQ recap", " 8 Data Structures We now know the different types of data points that Python can hold, whether they are integers, floats, strings of text, or boolean values. Typically, data points do not exist in isolation but instead are in a group. For example, consider a set of measurements of the peak day temperature over a period of a week. A group of data points such as these can be stored in a list. Use the same notebook (\"01-Fundamentals\") and add the following markdown cell: ## Data structures ### Lists From now on you won't be instructed to make markdown cells, instead use your judgement and make your own. 8.1 Lists Lists are used to store multiple items within a single variable. Lists allow duplicate values and once defined are always in the same order (ordered). Additional items can be added to the list and by default will appear at the bottom. Finally, lists are indexed meaning that we can easily retrieve the 1st, 2nd....nth item from the list. We define a list like any other variable. To add multiple values to the list we enclose them in square braces ([]) and include a comma between each value. Create the list in the below code block. It consists of made up fold-change values generated by an RNA-Seq type experiment. gene_fold_change = [0.25, -0.42, 0.62, 1.27, -0.5, 0] gene_fold_change To add an additional value to the end of the list, we can use the .append() method: Reminder: Each unique method can only be used on one type of data. The append() method can only be used with lists. gene_fold_change.append(0.33) gene_fold_change You can create lists containing strings. taxonomy_levels = [&quot;Kingdom&quot;, &quot;Phylum&quot;, &quot;Class&quot;, &quot;Order&quot;, &quot;Family&quot;, &quot;Genus&quot;, &quot;Species&quot;] taxonomy_levels You can even create lists with multiple data classes. numerals = [&quot;I&quot;, 1, &quot;V&quot;, 5, True] numerals 8.2 Subsetting data A value from a list can be retrieved by the position it occupies in the list. This selection can be carried out using square braces ([]). This process of selecting a certain portion of data is known as subsetting. One of the most vital aspects to grasp for Python is that data structures start at position zero. This can be confusing but is a common feature of many programming languages. 8.2.1 Single values To select the first entry in a list, we therefore pass position \"0\" in the square braces: Reminder: Create your own informative markdown cells. #Get the first value gene_fold_change[0] #Get the fifth value gene_fold_change[4] We can also use a negative value to count from the other end of the list. I.e. to get the last value in the list. #Get the last value (without knowing the length of the list) gene_fold_change[-1] 8.2.2 Multiple values The same technique also works to select a range of values from the list. The upper and lower position of the range to be selected given in square brackets, separated by a colon (X:Y). When using a range in this manner: The first number (X:) is inclusive. The last number (:Y) is exclusive. In other words all the positions except the last one will be selected. Try out the following code blocks to see this in practice. #Create a list containing the numbers 1 to 7 one_to_seven = [1,2,3,4,5,6,7] one_to_seven #Subset the third and fourth values one_to_seven[2:4] #Subset the first to fifth value one_to_seven[0:5] #Subset the first values one_to_seven[0:1] If you find this confusing you are not the only one so please don't feel bad about it. It will take time and effort for most people to get used to this. To subset everything from a certain position onwards, leave the upper value blank. This also works to select everything before a certain position. #Subset the sixth value to the end one_to_seven[5:] #Subset everything up to (but excluding) the third value one_to_seven[:2] Lists are incredibly useful but have their limitations so it is good to learn other data structures. 8.3 Set A set is similar to a list except that it can only hold unique values. A set also differs from a list in that they do not retain the order of the elements (unordered). Sets are defined using the curly braces ({}). Define a set containing the plants found on the one pound coin. plants_set = {&quot;Leek&quot;, &quot;Rose&quot;, &quot;Shamrock&quot;} plants_set We forgot the Scottish thistle! We can add a new element to our set using the .add() method. plants_set.add(&quot;Thistle&quot;) plants_set In real world analysis combining data from more samples might mean that duplicate plants were detected in the data. Adding plants that are already in the set has no effect as it cannot hold duplicate values. plants_set.add(&quot;Shamrock&quot;) plants_set 8.4 Convert a list to a set Sometimes we have a list of non-unique values and it is useful to extract the unique values. We can do this by transforming a list into a set. Add some gene IDs to a list. gene_IDs = [&quot;Agl&quot;, &quot;Pygm&quot;, &quot;Pgm2&quot;, &quot;Ugp2&quot;, &quot;Pygm&quot;, &quot;Pgm2&quot;] gene_IDs We can transform the list into a set using the function set(). gene_set = set(gene_IDs) gene_set 8.5 Dictionary The third data structure we will learn is the dictionary. A dictionary is an ordered data structure which holds pairs of values; a key and a value. For example, say we want to store the gene identifiers alongside our fold-change data that we recorded earlier in a list. Each gene identifier/fold-change pair is the key/value of the dictionary. Dictionaries are also defined using the curly braces but a pair of values are given each time, separated by a colon ({key:value}). Enter the following. Note: You need to press enter after each line. gene_fold_change = { &quot;Agl&quot; : 0.25, &quot;Pygm&quot; : -0.42, &quot;Pgm2&quot; : 0.62, &quot;Ugp2&quot; : 1.27, &quot;Gys1&quot; : -0.5, &quot;Phka1&quot; : 0, &quot;Phkg1&quot; : 0.33 } gene_fold_change Dictionaries are indexed meaning that individual records can be retrieved very quickly (important if you are working with very large dictionaries). We can retrieve the information for \"Gys1\" by using the identifier as the key and the dictionary will then return the value. gene_fold_change[&quot;Gys1&quot;] New values can be added to the dictionary in a similar way to how they are retrieved: gene_fold_change[&quot;ZT1&quot;] = 3.2 gene_fold_change[&quot;ZT1&quot;] You cannot subset dictionaries with numbers like a list. The pairing up of values in dictionaries is extremely useful if you are working with DNA sequence files (Fasta or FastQ). It offers an easy way of matching up the read identifier with the DNA nucleotide data, for example. Once indexed, the individual records can then be accessed extremely quickly. 8.6 Data structures MCQ recap Brilliant! You have learnt about different data structures in Python. Try choosing the correct option in the below senteces to recap what you have learnt. ________ hold an ordered catalogue of values. Dictionaries Lists Sets ________ can only hold unique values. Dictionaries Lists Sets ________ hold pairs of values (key and value). They can be used to quickly access individual records, even when they are extremely large. Dictionaries Lists Sets Data structures in Python start at position ________. -1 0 1 When subsetting values in a list the first number ([X:]) is ________. Exclusive Inclusive Key When subsetting values in a list the last number ([:Y]) is ________. Exclusive Inclusive Key You can access the value of a dictionary with its matching ________. Exclusive Inclusive Key The ________ method can add a value to a list. .add() .append() set() The ________ method can add a value to a set. .add() .append() set() The ________ function can create a set from a list. .add() .append() set() We are going to be using these data structures to look at and manipulate DNA sequence data specifically, but the principles apply to any datasets stored in these structures. Ensure you save your notebook. However, don't close it as you may find its contents useful for the next chapter of exercises. "],["09-fundamental-exercises.html", "9 Fundamental exercise 9.1 Fundamental exercise notebook 9.2 Moth light trap challenges 9.3 Exercise conclusion", " 9 Fundamental exercise To reinforce what you have learnt please try the exercise in this chapter. Solutions are in the expandable boxes. Try your best to solve the challenge but use the solutions for help if you would like. Even if your solution works it can be good to check the solution as there are many ways to do the same thing in python. In this exercise you are going to create, investigate, and manipulate data of UK moths found in light traps. 9.1 Fundamental exercise notebook Create a new notebook called \"02-Fundamental_exercises\". Use this notebook to carry out the exercises. Remember to use markdown cells to make headers. 9.2 Moth light trap challenges 9.2.1 Challenge 1 Create a list variable called \"moth_sightings_21sep\" with the ordered string values: \"Poplar Hawk-moth\" \"Elephant Hawk-moth\" \"Elephant Hawk-moth\" \"Cinnabar\" \"Poplar Hawk-moth\" \"Scarlet Tiger\" \"Scalloped Oak\" This is the species of the individual moths that visited the light trap on the 21st night of September. Then view the list. Moth 1 solution #1 moth_sightings_21sep = [&quot;Poplar Hawk-moth&quot;, &quot;Elephant Hawk-moth&quot;, &quot;Elephant Hawk-moth&quot;, &quot;Cinnabar&quot;, &quot;Poplar Hawk-moth&quot;, &quot;Scarlet Tiger&quot;, &quot;Scalloped Oak&quot;] moth_sightings_21sep 9.2.2 Challenge 2 Using python code calculate the percentage of individuals that were Elephant Hawk-moths in \"moth_sightings_21sep\". Tip: Operators, the function len() and the method .count() (it can be used on string lists) will be useful. Moth 2 solution #2 (moth_sightings_21sep.count(&quot;Elephant Hawk-moth&quot;) / len(moth_sightings_21sep)) * 100 9.2.3 Challenge 3 Create a set called unique_moths from the \"moth_sightings_21sep\" list. Moth 3 solution #3 unique_moths = set(moth_sightings_21sep) unique_moths 9.2.4 Challenge 4 Create a new list variable called \"moth_sightings_22sep\" with the ordered string values: \"Poplar Hawk-moth\" \"Elephant Hawk-moth\" \"Elephant Hawk-moth\" \"Cinnabar\" \"Feathered Thorn\" \"Scarlet Tiger\" \"Elephant Hawk-moth\" Tip: It can be useful to copy, paste, and edit previous code. Moth 4 solution #4 moth_sightings_22sep = [&quot;Poplar Hawk-moth&quot;, &quot;Elephant Hawk-moth&quot;, &quot;Elephant Hawk-moth&quot;, &quot;Cinnabar&quot;, &quot;Feathered Thorn&quot;, &quot;Scarlet Tiger&quot;, &quot;Elephant Hawk-moth&quot;] moth_sightings_22sep 9.2.5 Challenge 5 Add the string variable \"Feathered Thorn\" to the set unique_moths. Moth 5 solution #5 unique_moths.add(&quot;Feathered Thorn&quot;) unique_moths 9.2.6 Challenge 6 This is a multi stage challenge. Subset the lists in the following ways: Subset the 1st value of \"moth_sightings_21sep\". Subset the 3rd to 5th values of \"moth_sightings_22sep\". Subset the second last value of \"moth_sightings_21sep\". Subset the first 4 values of \"moth_sightings_22sep\". Subset the values from the 5th to the end of \"moth_sightings_21sep\". Subset the three last values of \"moth_sightings_22sep\". Moth 6 solution #6.1 moth_sightings_21sep[0] #6.2 moth_sightings_22sep[2:5] #6.3 moth_sightings_21sep[-2] #6.4 moth_sightings_22sep[:4] #6.5 moth_sightings_21sep[4:] #6.4 moth_sightings_22sep[-3:] 9.2.7 Challenge 7 Create a dictionary called \"moth_visits_sep\" containing the following key &amp; value pairs: \"Poplar Hawk-moth\" : 45 \"Elephant Hawk-moth\" : 72 \"Cinnabar\" : 23 \"Scarlet Tiger\" : 32 \"Scalloped Oak\" : 10 \"Feathered Thorn\" : 13 Moth 7 solution #7 moth_visits_sep = { &quot;Poplar Hawk-moth&quot; : 45, &quot;Elephant Hawk-moth&quot; : 72, &quot;Cinnabar&quot; : 23, &quot;Scarlet Tiger&quot; : 32, &quot;Scalloped Oak&quot; : 10 } moth_visits_sep 9.2.8 Challenge 8 Add the key/value pair \"Feathered Thorn\" : 13 to the dictionary \"moth_visits_sep\". Moth 8 solution #8 moth_visits_sep[&quot;Feathered Thorn] = 13 moth_visits_sep 9.3 Exercise conclusion Hopefully you found those challenges helpful in practising and solidifying your python skills and knowledge. In the next section we'll start playing with some real sequence data. You can now save and close and halt your notebooks. "],["10_conditions.html", "10 Python Conditions 10.1 Logical conditions 10.2 If statements 10.3 If else statements 10.4 Conditions reflection", " 10 Python Conditions In this section we are going to learn some programmatic Python coding including conditions and loops. Create a new notebook called \"03-Programmatic_coding\". Use this notebook in this chapter. 10.1 Logical conditions A powerful feature of most programming languages is the ability to compare values/variables and to make decisions based upon the outcome. This type of behaviour is achieved using logical conditions. The conditions allowed depends on the type of data you are comparing. You cannot use greater than (&gt;) or less than (&lt;) on string variables directly (although you could compare their lengths). Python supports the following logical conditions: Equals: a == b Does not equal: a != b Less than: a &lt; b Less than or equal to: a &lt;= b Greater than: a &gt; b Greater than or equal to: a &gt;= b Try the following: a = &quot;ATTGCG&quot; b = &quot;AGCGAT&quot; a==b len(a) == len(b) These logical conditions are most typically used in if statements. 10.2 If statements By testing whether certain comparisons evaluate as either True or False, we can change the flow of our programs. An if statement is a programming statement which acts like a switch. If the statement is True, the switch is activated. If the statement is False, the switch remains inactivated. A generic if statement using pseudocode would have the following structure: If a condition is met: Perform a task Try out the examples below. You will notice no results will appear when the conditions are False. if 1 == 1: print(&quot;1 is 1&quot;) if &quot;team&quot; != &quot;teaim: print(&quot;There is no I in team&quot;) if (2+2) == 5: print(&quot;4 is equal to 5&quot;) x = 8 *8 y = 4 ** 3 if x &lt; y: print(str(8*8) + &quot; is less than &quot; + str(4**3)) if x &gt;= y: print(str(8*8) + &quot; is greater or equal to &quot; + str(4**3)) 10.3 If else statements We can also include an action for when the condition has not been met using else. The else statement works in conjunction with the if and offers a different action if the condition evaluated to False. If a condition is met: Perform a task Else: Do something else For example, we might have a string of nucleotide data which we want to move through, translating any thymine (T) bases into uracil (U). The other three bases (A, C, and G) do not require any processing. The if and else statements to do this would look something like (again, using pseudocode): If the current nucleotide is \"T\": Print \"U\" Else: Print the current nucleotide We will explore using loops to move through data more in the next chapter. For now, try out the below if else statements. #Create some DNA variables a = &quot;ATTGCG&quot; b = &quot;AGCGAT&quot; c = &quot;GGTCATtat&quot; 10.3.1 DNA length comparison In the below code we create our new variables for the statement. This is so we only have to change the one set of variables if we change the input data. This is a common technique with conditions and loops. Tip: It is always useful to copy and paste code. #Compare lengths of a and b dna1 = a dna2 = b if len(dna1) == len(dna2): print(&quot;DNA sequences are the same length&quot;) else: print(&quot;Length difference is &quot; + str(len(dna1) - len(dna2))) #Compare lengths of a and c dna1 = a dna2 = b if len(dna1) == len(dna2): print(&quot;DNA sequences are the same length&quot;) else: print(&quot;Length difference is &quot; + str(len(dna1) - len(dna2))) 10.3.2 Nucleotide count comparison In the below examples we'll compare the number of specific nucleotides. We'll use the method .count(). In this case we'll calculate the nucleotide content outside of the condition. #Compare A content of a and b nt = &quot;A&quot; nt_count_1 = a.count(nt) nt_count_1 = b.count(nt) if nt_count_1 == nt_count_1: print(&quot;DNA sequences have the same count of &quot; + nt) else: print(&quot;DNA sequences do not have the same count of &quot; + nt) #Compare A content of c and b nt = &quot;A&quot; nt_count_1 = c.count(nt) nt_count_1 = b.count(nt) if nt_count_1 == nt_count_1: print(&quot;DNA sequences have the same count of &quot; + nt) else: print(&quot;DNA sequences do not have the same count of &quot; + nt) You will notice both pieces of code say the compared sequences don't have the same amounts of As. However b &amp; c both have 2 As. This result occurs as the method .count() is case sensitive. Therefore, it's counting 2 As for b and only 1 for c. To fix this we'll also use the method .upper(). This is good practice with DNA sequences. Edit your previous code cells to: #Compare A content of a and b nt = &quot;A&quot; nt_count_1 = a.upper().count(nt) nt_count_1 = b.upper().count(nt) if nt_count_1 == nt_count_1: print(&quot;DNA sequences have the same count of &quot; + nt) else: print(&quot;DNA sequences do not have the same count of &quot; + nt) #Compare A content of c and b nt = &quot;A&quot; nt_count_1 = c.upper().count(nt) nt_count_1 = b.upper().count(nt) if nt_count_1 == nt_count_1: print(&quot;DNA sequences have the same count of &quot; + nt) else: print(&quot;DNA sequences do not have the same count of &quot; + nt) When you run the above code, they will now be correct for our purposes. 10.4 Conditions reflection If and else statements can be used to make decisions in our programs by comparing values. This might be to check if two strings are the same, two lists contain the same number of items, or a string of nucleotide data has 100 or more bases. We can think of them as switches. Often we need to make these if/else comparisons for every item in a data structure and to do this we can use loops. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
